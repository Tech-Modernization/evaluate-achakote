AWSTemplateFormatVersion: 2010-09-09

Description: API Gateway Test

Parameters:
  MyName:
    Type: String
    Default: AmitC
    Description: Name of the Candidate

Resources:
  DynamoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub Challenge_${MyName}
      AttributeDefinitions:
        - AttributeName: team
          AttributeType: S
      KeySchema:
        - AttributeName: team
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      SSESpecification:
        SSEEnabled: true

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json
          import boto3
          import os

          def dynamo_itemcreate(team_name, team_country, team_desc, team_rating):
              dynamodb = boto3.client('dynamodb')
              db_name = os.environ["Dynamodb_Table"]
              dynamodb.put_item(TableName=db_name, Item={'country':{'S':team_country}, 'team':{'S':team_name}, 'desc':{'S':team_desc}, 'rating':{'S':team_rating}})

          def lambda_handler(event, context):
              print('Team Country: %s' % event['team_country'])
              print('Team Name: %s' % event['team_name'])
              print('Team Description: %s' % event['team_desc'])
              print('Team Rating: %s' % event['team_rating'])
              dynamo_itemcreate(event['team_name'], event['team_country'], event['team_desc'],event['team_rating'])
      Description: API Gateway TechChallenge
      Handler: index.lambda_handler
      Environment:
        Variables:
          Dynamodb_Table: !Ref DynamoTable
      MemorySize: 128
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.7
      Timeout: 5

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: dynamodb:PutItem
            Resource: !GetAtt DynamoTable.Arn

  APIPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      FunctionName:
        'Fn::GetAtt':
          - LambdaFunction
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        'Fn::Join':
          - ''
          - - 'arn:aws:execute-api:'
            - Ref: 'AWS::Region'
            - ':'
            - Ref: 'AWS::AccountId'
            - ':'
            - Ref: ApiRestApi
            - /*


  ApiRestApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: !Sub RestAPI_${MyName}
      EndpointConfiguration:
        Types: 
          - REGIONAL

  ApiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt 
        - ApiRestApi
        - RootResourceId
      RestApiId: !Ref ApiRestApi
      PathPart: 'add_new'

  ApiMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      ApiKeyRequired: true
      RestApiId: !Ref ApiRestApi
      ResourceId: !Ref ApiResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Join 
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt 
              - LambdaFunction
              - Arn
            - /invocations
        IntegrationResponses:
          - ResponseTemplates:
              application/json: '{}'
            ResponseParameters:
              method.response.header.Location: integration.response.body.headers.uid
            StatusCode: "201"
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: '{ "team_name": $input.json(''team_name''), "team_country": $input.json(''team_country''), "team_desc": $input.json(''team_desc''), "team_rating": $input.json(''team_rating'')}'
      RequestModels:
        application/json: !Ref ApiModel
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Location: true
          StatusCode: "201"

  ApiModel:
    Type: 'AWS::ApiGateway::Model'
    Properties:
      ContentType: application/json
      Name: Team
      RestApiId: !Ref ApiRestApi
      Schema:
        title: Team
        type: object
        properties: 
          team_country:
            type: string
          team_name:
            type: string
          team_desc:
            type: string
          team_rating: 
            type: string

  ApiDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref ApiRestApi
      StageName: v1
    DependsOn:
      - ApiMethod
      - ApiModel
      - APIPermission

  ApiKey:
    Type: 'AWS::ApiGateway::ApiKey'
    Properties:
      Name: UserAPIKey
      Description: User API Key V1
      Enabled: true
      StageKeys:
        - RestApiId: !Ref ApiRestApi
          StageName: v1
    DependsOn:
      - ApiDeployment

  usagePlan:
    Type: 'AWS::ApiGateway::UsagePlan'
    Properties:
      ApiStages:
        - ApiId: !Ref ApiRestApi
          Stage: "v1"
      Description: User's usage plan
      Quota:
        Limit: 100
        Period: MONTH
      Throttle:
        BurstLimit: 20
        RateLimit: 10
      UsagePlanName: Basic
    DependsOn:
      - ApiDeployment

  usagePlanKey:
    Type: 'AWS::ApiGateway::UsagePlanKey'
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref usagePlan

Outputs:
  RootUrl:
    Description: Root URL of the API gateway
    Value: !Join 
      - ''
      - - 'https://'
        - !Ref ApiRestApi
        - .execute-api.
        - !Ref 'AWS::Region'
        - .amazonaws.com/